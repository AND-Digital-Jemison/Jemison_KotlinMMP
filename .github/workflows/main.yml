# This is a basic workflow to help you get started with Actions

name: CI - Android / iOS build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # will not run the action on specified files, so when updating readmes...
  push:
    branches: [ main ]
    paths-ignore:
      - '**/README.md'
      - '**/Android.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/README.md'
      - '**/Android.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # set the runner - os that will be used to run the commands, check github actions for more OSes
    runs-on: macos-latest
    
    # set the working directory - we dont have project in git root dir but inside KotlinMMP
    env:
      working-directory: ./KotlinMMP
      
    steps:
    # USES - uses alredy pre-defined github actions so they can be reused across other repos
    # checkout our branch into the runner (OS)  or @v2 or @master
    - uses: actions/checkout@v2
    - name: Setup Java JDK
      uses: actions/setup-java@v1
      
      # setup JAVA verssion - check github what other version are available
      with:
       java-version: '11'
      
    # run commands, similar to local command line ,just needed to specify our working dir  
   # - name: Builds gradle wrapper file
   #   run: gradle wrapper
   #   working-directory: ${{env.working-directory}}
   
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/KotlinMMP/.gradle/caches
          ~/KotlinMMP/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
      
    - name: Check the code with the LINTer
      run: ./gradlew lint
      working-directory: ${{env.working-directory}}
      
    - name: Tests the project
      run: ./gradlew test
      working-directory: ${{env.working-directory}}
      
    - name: Build the project
      run: ./gradlew assemble
      working-directory: ${{env.working-directory}}
      
    #- name: Cleanup Gradle Cache
    # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
    # Restoring these files from a GitHub Actions cache might cause problems for future builds.
    #run: |
    #  rm -f ~/.gradle/caches/modules-2/modules-2.lock
    #  rm -f ~/.gradle/caches/modules-2/gc.properties
