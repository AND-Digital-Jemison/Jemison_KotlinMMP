type TASK @aws_iam @aws_api_key {
  id: ID!
  name: String!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTASKConnection @aws_api_key @aws_iam {
  items: [TASK]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelTASKFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelTASKFilterInput]
  or: [ModelTASKFilterInput]
  not: ModelTASKFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getTASK(id: ID!): TASK @aws_api_key @aws_iam
  listTASKs(filter: ModelTASKFilterInput, limit: Int, nextToken: String): ModelTASKConnection @aws_api_key @aws_iam
  syncTASKS(filter: ModelTASKFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTASKConnection @aws_api_key @aws_iam
}

input CreateTASKInput {
  id: ID
  name: String!
  _version: Int
}

input UpdateTASKInput {
  id: ID!
  name: String
  _version: Int
}

input DeleteTASKInput {
  id: ID!
  _version: Int
}

type Mutation {
  createTASK(input: CreateTASKInput!, condition: ModelTASKConditionInput): TASK @aws_api_key @aws_iam
  updateTASK(input: UpdateTASKInput!, condition: ModelTASKConditionInput): TASK @aws_api_key @aws_iam
  deleteTASK(input: DeleteTASKInput!, condition: ModelTASKConditionInput): TASK @aws_api_key @aws_iam
}

input ModelTASKConditionInput {
  name: ModelStringInput
  and: [ModelTASKConditionInput]
  or: [ModelTASKConditionInput]
  not: ModelTASKConditionInput
}

type Subscription {
  onCreateTASK: TASK @aws_subscribe(mutations: ["createTASK"]) @aws_api_key @aws_iam
  onUpdateTASK: TASK @aws_subscribe(mutations: ["updateTASK"]) @aws_api_key @aws_iam
  onDeleteTASK: TASK @aws_subscribe(mutations: ["deleteTASK"]) @aws_api_key @aws_iam
}
